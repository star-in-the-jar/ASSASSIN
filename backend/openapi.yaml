openapi: 3.0.0
info:
  version: "1.0.0"
  title: Assassin-API
  description: Assassin-API docs for internal purposes. Throught the docs "orders" and "blood test results" are used interchangebly.
paths: 
  /api/patients:
    get:
      summary: Returns all patients
      tags:
        - Patient
      description: Retrieve a list of patients from the database
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              example:
                - _id: "65a83f0fb19b10f86719f4d2"
                  name: "John"
                  surname: "Doe"
                  twofaEnabled: false
                  twofaSecret: ""
                  orders: []
                  authInfo: 
                    login: "johnDoe"
                    password: "hashedpassword"
                - _id: "65a83f0fb19b178d32423"
                  name: "Jane"
                  surname: "Doe"
                  twofaEnabled: false
                  twofaSecret: ""
                  orders: []
                  authInfo: 
                    login: "JaneDoe"
                    password: "hashedpassword"
                
                
        '500':
          description: Internal server error
          content:
            application/json:
              example:
                message: "Internal server error"
    post:
      summary: Creates a new patient
      tags:
        - Patient
      description: Sends the data needed to create a Patient object in the database.
      requestBody:
        required: true
        content:
          application/json:
            example:
              name: "John"
              surname: "Doe"
              authInfo:
                login: "johnDoe"
                password: "nonhashed-password"
      responses:
        '201':
          description: Successful response
          content:
            application/json:
              example:
                - message: 'Patient created successfully'
                  patient:
                    _id: "65a83f0fb19b10f86719f4d2"
                    name: "John"
                    surname: "Doe"
                    twofaEnabled: false
                    twofaSecret: ""
                    orders: []
                    authInfo: 
                      login: "johnDoe"
                      password: "hashedpassword"
        '400':
          description: Patient of given login already exists
          content:
            application/json:
              example:
                message: 'Patient already exists'

        '500':
          description: Internal server error
          content:
            application/json:
              example:
                message: "Internal server error"
  /api/patients/{id}:
    parameters:
    - name: id
      in: path
      required: true
      description: The ID of the patient
      schema:
        type: string
    get:
      summary: Returns patient by ID
      tags:
        - Patient
      description: Retrieve a patient by their ID from the database
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              example:
                _id: "65a83f0fb19b10f86719f4d2"
                name: "John"
                surname: "Doe"
                twofaEnabled: false
                twofaSecret: ""
                orders: []
                authInfo: 
                  login: "johnDoe"
                  password: "hashedpassword"
        '400':
          description: Invalid ID format
          content:
            application/json:
              example:
                message: "Invalid ObjectId format for patient id."
        '404':
          description: Patient does not exist
          content:
            application/json:
              example:
                message: "Patient not found"
        '500':
          description: Internal server error
          content:
            application/json:
              example:
                message: "Internal server error"
    put:
      summary: Edits a patient's data
      tags:
        - Patient
      description: Update a Patient object in the database with provided data
      requestBody:
        required: true
        content:
          application/json:
            example:
              name: "John"
              surname: "Doe"
              authInfo:
                login: "updatedJohnDoe"
                password: "updated-password"
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              example:
                _id: "65a83f0fb19b10f86719f4d2"
                name: "John"
                surname: "Doe"
                twofaEnabled: false
                twofaSecret: ""
                orders: []
                authInfo: 
                  login: "updatedJohnDoe"
                  password: "updated-hashed-password"
        '400':
          description: Patient of this login already exists
          content:
            application/json:
              example:
                message: "Patient with this login already exists"
        '404':
          description: Patient does not exists
          content:
            application/json:
              example:
                message: "Patient not found"
        '500':
          description: Internal server error
          content:
            application/json:
              example:
                message: "Internal server error"
    delete:
      summary: Deletes a patient
      tags:
        - Patient
      description: Delete a patient object from the database
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              example:
                message: "Patient deleted successfully"
                patient:
                  _id: "65a83f0fb19b10f86719f4d2"
                  name: "John"
                  surname: "Doe"
                  twofaEnabled: false
                  twofaSecret: ""
                  orders: []
                  authInfo: 
                    login: "JohnDoe"
                    password: "hashed-password"
        '404':
          description: Patient not found
          content:
            application/json:
              example:
                message: 'Patient not found'
                
  /api/patient/results:
    post:
      summary: Creates a new blood test result associated with a patient.
      tags:
        - Orders
      description: Create an Order object in the database associated with a Doctor, Hospital and Patient object
      requestBody:
        required: true
        content:
          application/json:
            example:
              hospital: "612345678901234567890123"
              doctor: "612345678901234567890124"
              patient: "612345678901234567890125"
              results:
                wbc: "value_here"
                rbc: "value_here"
                hct: "value_here"
                mcv: "value_here"
                mch: "value_here"
                plt: "value_here"
                mpv: "value_here"
                rdw: "value_here"
                pdw: "value_here"
                hemoglobin: "value_here"
      responses:
        '201':
          description: Successful response
          content:
            application/json:
              example:
                message: "Results added successfully"
                order:
                  hospital: "612345678901234567890123"
                  doctor: "612345678901234567890124"
                  patient: "612345678901234567890125"
                  results:
                    wbc: "value_here"
                    rbc: "value_here"
                    hct: "value_here"
                    mcv: "value_here"
                    mch: "value_here"
                    plt: "value_here"
                    mpv: "value_here"
                    rdw: "value_here"
                    pdw: "value_here"
                    hemoglobin: "value_here"
                  _id: "65a94dc3139f4dfa3287f39c"
                  createdAt: "2024-01-18T16:11:47.875Z"
                  __v: 0
        '400':
          description: Invalid ObjectId for either patient, hospital or doctor
          content:
            application/json:
              example:
                message: 'Invalid ObjectId format for hospital, doctor, or patient.'
        '500':
          description: Internal server error
          content:
            application/json:
              example:
                message: "Internal server error"
  /api/patient/results/{id}:
    get:
      parameters:
      - name: id
        in: path
        required: true
        description: The ID of the blood test order
        schema:
          type: string
      summary: Get a blood test result
      tags:
        - Orders
      description: Fetch an Order object from the database
      responses:
        '201':
          description: Successful response
          content:
            application/json:
              example:
                message: "Order details retrieved successfully"
                order:
                  results:
                    wbc: "value_here"
                    rbc: "value_here"
                    hct: "value_here"
                    mcv: "value_here"
                    mch: "value_here"
                    plt: "value_here"
                    mpv: "value_here"
                    rdw: "value_here"
                    pdw: "value_here"
                    hemoglobin: "value_here"
                  _id: "65a94dc3139f4dfa3287f39c"
                  hospital: "612345678901234567890123"
                  doctor: "612345678901234567890124"
                  patient: "612345678901234567890125"
                  createdAt: "2024-01-18T16:11:47.875Z"
                  __v: 0
        '404':
          description: Order not found
          content:
            application/json:
              example:
                message: 'Order not found'
        '500':
          description: Internal server error
          content:
            application/json:
              example:
                message: "Internal server error"
    put:
      parameters:
      - name: id
        in: path
        required: true
        description: The ID of the blood test order
        schema:
          type: string
      summary: Edits blood test results of a patient.
      tags:
        - Orders
      description: Updates an Order object from the database with the given data
      requestBody:
        required: true
        content:
          application/json:
            example:
              hospital: "612345678901234567890123"
              doctor: "612345678901234567890124"
              patient: "612345678901234567890125"
              results:
                wbc: "new_value_here"
                rbc: "new_value_here"
                hct: "new_value_here"
                mcv: "new_value_here"
                mch: "new_value_here"
                plt: "new_value_here"
                mpv: "value_here"
                rdw: "value_here"
                pdw: "value_here"
                hemoglobin: "value_here"
      responses:
        '201':
          description: Successful response
          content:
            application/json:
              example:
                message: "Order updated successfully"
                order:
                  hospital: "612345678901234567890123"
                  doctor: "612345678901234567890124"
                  patient: "612345678901234567890125"
                  results:
                    wbc: "new_value_here"
                    rbc: "new_value_here"
                    hct: "new_value_here"
                    mcv: "new_value_here"
                    mch: "new_value_here"
                    plt: "new_value_here"
                    mpv: "value_here"
                    rdw: "value_here"
                    pdw: "value_here"
                    hemoglobin: "value_here"
                  _id: "65a94dc3139f4dfa3287f39c"
                  createdAt: "2024-01-18T16:11:47.875Z"
                  __v: 0
        '404':
          description: Order not found
          content:
            application/json:
              example:
                message: 'Order not found'
        '500':
          description: Internal server error
          content:
            application/json:
              example:
                message: "Internal server error"
    delete:
      parameters:
      - name: id
        in: path
        required: true
        description: The ID of the blood test order
        schema:
          type: string
      summary: Delete a blood test result entry
      tags:
        - Orders
      description: Delete an Order object with given ID from the database.
      responses:
        '201':
          description: Successful response
          content:
            application/json:
              example:
                message: "Order deleted successfully"
                order:
                  results:
                    wbc: "value_here"
                    rbc: "value_here"
                    hct: "value_here"
                    mcv: "value_here"
                    mch: "value_here"
                    plt: "value_here"
                    mpv: "value_here"
                    rdw: "value_here"
                    pdw: "value_here"
                    hemoglobin: "value_here"
                  _id: "65a9aa3ddaea919ba1583025"
                  hospital: "612345678901234567890123"
                  doctor: "612345678901234567890124"
                  patient: "612345678901234567890125"
                  createdAt: "2024-01-18T22:46:21.425Z"
                  __v: 0
        '404':
          description: Order not found
          content:
            application/json:
              example:
                message: 'Order not found'
        '500':
          description: Internal server error
          content:
            application/json:
              example:
                message: "Internal server error"
                
  /api/hospitals:
    get:
      summary: Returns all hospitals
      tags:
        - Hospitals
      description: Retrieve a list of hospitals from the database
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              example:
                hospitals:
                  - authInfo:
                      login: "hospitarname"
                      password: "hospital_password"
                    address:
                      street: "Hospital Street"
                      zipCode: "12345"
                      city: "Hospital City"
                    _id: "65a83eaab19b10f86719f4c6"
                    name: "Hospital"
                    role: "hospital"
                    orders: []
                    doctors: []
                    twofaEnabled: false
                    twofaSecret: ""
                    __v: 0
                  - authInfo:
                      login: "hospital_username"
                      password: "hospital_password"
                    address:
                      street: "Hospital Street"
                      zipCode: "12345"
                      city: "Hospital City"
                    _id: "65a89954ac80626f106e8756"
                    name: "Hospital"
                    role: "hospital"
                    orders: []
                    doctors: []
                    twofaEnabled: false
                    twofaSecret: ""
                    __v: 0
                  - authInfo:
                      login: "hospital_username"
                      password: "$2b$10$xTQiuwpMuY9OFLF0Cf/gseTj9b9JKzrTtIKLBBc39fBkNYTs1UXcm"
                    address:
                      street: "Hospital Street"
                      zipCode: "12345"
                      city: "Hospital City"
                    _id: "65a94abbab5657895f9c872d"
                    name: "Hospital-test"
                    role: "hospital"
                    orders: []
                    doctors: []
                    twofaEnabled: false
                    twofaSecret: ""
                    __v: 0
        '500':
          description: Internal server error
          content:
            application/json:
              example:
                message: "Internal server error"
    post:
      summary: Creates a new hospital
      tags:
        - Hospitals
      description: Sends the data needed to create a Hospital object in the database.
      requestBody:
        required: true
        content:
          application/json:
            example:
              name: "Hospital"
              role: "hospital"
              authInfo:
                login: "hospital_username"
                password: "hospital_password"
              address:
                street: "Hospital Street"
                zipCode: "12345"
                city: "Hospital City"
      responses:
        '201':
          description: Successful response
          content:
            application/json:
              example:
                message: 'Hospital created successfully'
                hospital:
                  name: "Hospital"
                  role: "hospital"
                  authInfo:
                    login: "hospital_username"
                    password: "$2b$10$lfHngDO/oWMOynTnD53CVOoNu2i9BxOrl3vB7N1GUSvNS0lgdHF86"
                  orders: []
                  doctors: []
                  address:
                    street: "Hospital Street"
                    zipCode: "12345"
                    city: "Hospital City"
                  twofaEnabled: false
                  twofaSecret: ""
                  _id: "65a94dd8139f4dfa3287f3a3"
                  __v: 0
        '500':
          description: Internal server error
          content:
            application/json:
              example:
                message: "Internal server error"
  /api/hospitals/{id}:
    parameters:
    - name: id
      in: path
      required: true
      description: The ID of the hospital
      schema:
        type: string
    get:
      summary: Returns a hospital by ID
      tags:
        - Hospitals
      description: Retrieve a hospital by their ID from the database
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              example:
                hospital:
                  authInfo:
                    login: "hospital_username"
                    password: "$2b$10$lfHngDO/oWMOynTnD53CVOoNu2i9BxOrl3vB7N1GUSvNS0lgdHF86"
                  address:
                    street: "Hospital Street"
                    zipCode: "12345"
                    city: "Hospital City"
                  _id: "65a94dd8139f4dfa3287f3a3"
                  name: "Hospital"
                  role: "hospital"
                  orders: []
                  doctors: []
                  twofaEnabled: false
                  twofaSecret: ""
                  __v: 0
        '404':
          description: Hospital does not exist
          content:
            application/json:
              example:
                message: "Hospital not found"
        '500':
          description: Internal server error
          content:
            application/json:
              example:
                message: "Internal server error"
    put:
      summary: Edits a hospital's data
      tags:
        - Hospitals
      description: Update a Hospital object in the database with provided data
      requestBody:
        required: true
        content:
          application/json:
            example:
              name: "Hospital"
              role: "hospital"
              authInfo:
                login: "hospital_usernam"
                password: "hospital_password"
              address:
                street: "Hospital Street"
                zipCode: "12345"
                city: "Hospital City"
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              example:
                message: 'Hospital updated successfully'
                hospital:
                  name: "Hospital"
                  role: "hospital"
                  authInfo:
                    login: "hospital_usernam"
                    password: "hospital_password"
                  address:
                    street: "Hospital Street"
                    zipCode: "12345"
                    city: "Hospital City"
                  _id: "65a94dd8139f4dfa3287f3a3"
                  orders: []
                  doctors: []
                  twofaEnabled: false
                  twofaSecret: ""
                  __v: 0
        '404':
          description: Hospital does not exists
          content:
            application/json:
              example:
                message: "Hospital not found"
        '500':
          description: Internal server error
          content:
            application/json:
              example:
                message: "Internal server error"
    delete:
      summary: Deletes a hospital
      tags:
        - Hospitals
      description: Delete a Hospital object from the database
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              example:
                message: 'Hospital deleted successfully'
                hospital:
                  authInfo:
                    login: "hospital_usernam"
                    password: "hospital_password"
                  address:
                    street: "Hospital Street"
                    zipCode: "12345"
                    city: "Hospital City"
                  _id: "65a94dd8139f4dfa3287f3a3"
                  name: "Hospital"
                  role: "hospital"
                  orders: []
                  doctors: []
                  twofaEnabled: false
                  twofaSecret: ""
                  __v: 0
        '404':
          description: Hospital does not exist
          content:
            application/json:
              example:
                message: 'Hospital not found'
  
  /api/doctors:
    get:
      summary: Returns all doctors
      tags:
        - Doctors
      description: Retrieve a list of doctors from the database
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              example:
                - _id: "65a83f0fb19d10g06719f4d2"
                  surname: "Smith"
                  hospitals: 
                    ["65a83eaab19b10f86719f4c6"]
                  __v: 0
                - _id: "65a83f0fb19d10g06719f4d2"
                  surname: "Doe"
                  hospitals: 
                    []
                  __v: 0
        '500':
          description: Internal server error
          content:
            application/json:
              example:
                message: "Internal server error"
    post:
      summary: Creates a new doctor
      tags:
        - Doctors
      description: Sends the data needed to create a Doctor object in the database.
      requestBody:
        required: true
        content:
          application/json:
            example:
              surname: "Doe"
      responses:
        '201':
          description: Successful response
          content:
            application/json:
              example:
                - message: 'Doctor created or updated successfully'
                  doctor:
                    _id: "65a83f0fb19b10f86719f4d2"
                    surname: "Doe"
                    hospitals: []
                    __v: 0
        '500':
          description: Internal server error
          content:
            application/json:
              example:
                message: "Internal server error"
  /api/doctors/{id}:
    parameters:
    - name: id
      in: path
      required: true
      description: The ID of the doctor
      schema:
        type: string
    get:
      summary: Returns doctor by ID
      tags:
        - Doctors
      description: Retrieve a doctor by their ID from the database
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              example:
                _id: "65a83f0fb19b10f86719f4d2"
                surname: "Doe"
                hospitals: []
                __v: 0
        '404':
          description: Doctor does not exist
          content:
            application/json:
              example:
                message: "Doctor not found"
        '500':
          description: Internal server error
          content:
            application/json:
              example:
                message: "Internal server error"
    put:
      summary: Edits a doctors's data
      tags:
        - Doctors
      description: Update a Doctor object in the database with provided data
      requestBody:
        required: true
        content:
          application/json:
            example:
              surname: "Doe"
              hospitals: ["65b99f0sb29b10f86779f4d6"]
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              example:
                - message: 'Doctor updated successfully'
                  doctor:
                    _id: "65a83f0fb19b10f86719f4d2"
                    surname: "Doe"
                    hospitals: ["65b99f0sb29b10f86779f4d6"]
                    __v: 0
        '404':
          description: Doctor does not exists
          content:
            application/json:
              example:
                message: "Doctor not found"
        '500':
          description: Internal server error
          content:
            application/json:
              example:
                message: "Internal server error"
    delete:
      summary: Deletes a doctor
      tags:
        - Doctors
      description: Delete a Doctor object from the database
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              example:
                message: "Doctor deleted successfully"
                deletedDoctor:
                  _id: "65a83f0fb19b10f86719f4d2"
                  surname: "Doe"
                  hospitals: []
                  __v: 0
        '404':
          description: Doctor not found
          content:
            application/json:
              example:
                message: 'Doctor not found'
        '500':
          description: Internal server error
          content:
            application/json:
              example:
                message: "Internal server error"
  
  /api/{person}/signup:
    post:
      summary: Signup route for doctors and patients
      tags: 
        - Auth (experimental)
      description: Signup for doctors or patients
      requestBody:
        required: true
        content:
          application/json:
            example:
                authInfo:
                 login: "johnDoe"
                 password: "password"
      parameters:
        - name: person
          in: path
          description: Type of person (doctor or patient)
          required: true
          schema:
            type: string
            enum: [doctor, patient]
      responses:
        '200':
          description: Successful signup
          content:
            application/json:
              example:
                message: 'Login successful'
                user:
                  login: "johnDoe"
        '401':
          description: Unauthorized
          content:
            application/json:
              example:
                message: "Unauthorized"
        '500':
          description: Internal server error
          content:
            application/json:
              example:
                message: "Internal server error"
  /api/{person}/login:
    post:
      summary: Login route for doctors and patients
      tags: 
        - Auth (experimental)
      description: Login for doctors or patients
      requestBody:
        required: true
        content:
          application/json:
            example:
                authInfo:
                 login: "johnDoe"
                 password: "password"
      parameters:
        - name: person
          in: path
          description: Type of person (doctor or patient)
          required: true
          schema:
            type: string
            enum: [doctor, patient]
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              example:
                message: 'Login successful'
                twofaEnabled: false
                token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImxvZ2luIjoiOEVTVElORzIzNDM0MzI0MjMifSwiaWF0IjoxNzA1NTkzNzIzfQ.aKD_odtRJAjtL64ng9s_peAtP72yOjPQoc2trlZS0Lo"
        '401':
          description: Invalid login or password
          content:
            application/json:
              example:
                message: "Invalid login or password"
        '500':
          description: Internal server error
          content:
            application/json:
              example:
                message: "Internal server error"
  /api/{person}/generate-2fa-secret:
    post:
      summary: Generate 2FA secret token
      tags: 
        - Auth (experimental)
      description: Generate 2FA secret token for a patient or a doctor, used when turning on the 2FA login
      requestBody:
        required: true
        content:
          application/json:
            example:
                token: "530125"
      parameters:
        - name: person
          in: path
          description: Type of person (doctor or patient)
          required: true
          schema:
            type: string
            enum: [doctor, patient]
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              example:
                message: ""
        '400':
          description: 2FA already activated
          content:
            application/json:
              example:
                message: "2FA already verified and enabled"
        '500':
          description: Internal server error
          content:
            application/json:
              example:
                message: "Internal server error"
  /api/{person}/verify-otp:
    post:
      summary: Verify OTP code for a user
      tags: 
        - Auth (experimental)
      description: Checks if OTP given by the user is correct for their account
      requestBody:
        required: true
        content:
          application/json:
            example:
                user:
                  login: "johnDoe"
                token: "530125"
      parameters:
        - name: person
          in: path
          description: Type of person (doctor or patient)
          required: true
          schema:
            type: string
            enum: [doctor, patient]
      responses:
        '200':
          description: OTP verification successful
          content:
            application/json:
              example:
                message: "OTP verification successful"
                twofaEnabled: true
        '400':
          description: Bad token
          content:
            application/json:
              example:
                message: "OTP verification failed: Invalid token"
        '500':
          description: Internal server error
          content:
            application/json:
              example:
                message: "Internal server error"
  /api/{person}/login-step2:
    post:
      summary: Verify 2FA user data for log in purposes
      tags: 
        - Auth (experimental)
      description: Verifies user's 2FA login token and 2FA code for log in purposes
      requestBody:
        required: true
        content:
          application/json:
            example:
                loginStep2VerificationToken: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJsb2dpblN0ZXAyVmVyaWZpY2F0aW9uIjp7ImxvZ2luIjoiVEVTVFNBU0RBU0RBU0RTUzIzIn0sImlhdCI6MTcwNTQzOTMyMCwiZXhwIioxNzA1NDN5NjLwfQ.XzlW3GRdiuJlYAUR3l_gjaOApz2yeZACky0qX4pvaf8"
                token: "530125"
      parameters:
        - name: person
          in: path
          description: Type of person (doctor or patient)
          required: true
          schema:
            type: string
            enum: [doctor, patient]
      responses:
        '200':
          description: OTP verification successful
          content:
            application/json:
              example:
                message: "OTP verification successful"
                token: "signed-token"
        '400':
          description: Bad token
          content:
            application/json:
              example:
                message: "OTP verification failed: Invalid token"
        '500':
          description: Internal server error
          content:
            application/json:
              example:
                message: "Internal server error"
  /api/{person}/disable-2fa:
    post:
      summary: Disables 2FA login for a given user
      tags: 
        - Auth (experimental)
      description: Deletes user 2FA login token and disables the route
      requestBody:
        required: true
        content:
          application/json:
            example:
              questionmark:
                xd: null
      parameters:
        - name: person
          in: path
          description: Type of person (doctor or patient)
          required: true
          schema:
            type: string
            enum: [doctor, patient]
      responses:
        '200':
          description: 2FA disabled sucessfully
          content:
            application/json:
              example:
                message: "2FA disabled successfully"
                twofaEnabled: false
        '500':
          description: Internal server error
          content:
            application/json:
              example:
                message: "Internal server error"
  /api/{person}/profile:
    post:
      summary: Displays user data
      tags: 
        - Auth (experimental)
      description: Return user data associated with given JWT token
      requestBody:
        required: true
        content:
          application/json:
            example:
              questionmark:
                xd: null
      parameters:
        - name: person
          in: path
          description: Type of person (doctor or patient)
          required: true
          schema:
            type: string
            enum: [doctor, patient]
      responses:
        '200':
          description: 2FA disabled sucessfully
          content:
            application/json:
              example:
                message: "Success"
                user:
                  _id: "65a83f0fb19b10f86719f4d2"
                  name: "John"
                  surname: "Doe"
                  twofaEnabled: false
                  twofaSecret: ""
                  orders: []
                  authInfo: 
                    login: "johnDoe"
                    password: "hashedpassword"
        '500':
          description: Internal server error
          content:
            application/json:
              example:
                message: "Internal server error"
components:
  schemas:
    Doctor:
      type: object
      properties:
        id:
          type: string
          example: "ObjectId('65a94efafe2e74635b1c60b9')"
        surname:
          type: string
          example: "Doe"
        hospitals:
          type: array
          items:
            $ref: '#/components/schemas/Hospital'
      description: "Model of a doctor, stores list of hospitals the doctor currently resides at."

    Hospital:
      type: object
      properties:
        id:
          type: string
          example: "ObjectId('65a94efafe2e74635b1c60b9')"
        name:
          type: string
          example: "Szpital Kliniczny"
        role:
          type: string
        authInfo:
          type: object
          properties:
            login:
              type: string
              example: "abc123"
            password:
              type: string
              format: hashed
              example: "a665a45920422f9d417e4867efdc4fb8a04a1f3fff1fa07e998e86f7f7a27ae3"
      description: "Model of a hospital"

    Patient:
      type: object
      properties:
        id:
          type: string
          example: "ObjectId('65a94efafe2e74635b1c60b9')"
        name:
          type: string
          example: "John"
        surname:
          type: string
          example: "Doe"
        authInfo:
          type: object
          properties:
            login:
              type: string
              example: "abc123"
            password:
              type: string
              format: hashed
              example: "a665a45920422f9d417e4867efdc4fb8a04a1f3fff1fa07e998e86f7f7a27ae3"
        twofaEnabled:
          type: boolean
          example: false
        twofaSecret:
          type: string
          example: ""
        orders:
          type: array
          items:
            $ref: '#/components/schemas/Order'
      description: "Model of a patient, stores their orders."

    Order:
      type: object
      properties:
        id:
          type: string
          example: "ObjectId('65a94efafe2e74635b1c60b9')"
        doctor:
          type: object
          $ref: '#/components/schemas/Doctor'
        hospital:
          type: object
          $ref: '#/components/schemas/Hospital'
        patient:
          type: object
          $ref: '#/components/schemas/Patient'
        createdAt:
          type: string
          example: '01-01-2024'
        editedAt:
          type: string
          example: '01-01-2024'
        result:
          type: object
          items:
            type: object
            properties:
              results:
                type: array
                items:
                  type: object
                  properties:
                    wbc:
                      type: string
                    rbc:
                      type: string
                    hct:
                      type: string
                    mcv:
                      type: string
                    mch:
                      type: string
                    plt:
                      type: string
                    mpv:
                      type: string
                    rdw:
                      type: string
                    pdw:
                      type: string
                    hemoglobin:
                      type: string
                example:
                  results:
                    - wbc: "4.5"
                      rbc: "5.0"
                      hct: "40"
                      mcv: "90"
                      mch: "30"
                      plt: "150"
                      mpv: "10"
                      rdw: "13"
                      pdw: "15"
                      hemoglobin: "14"
      description: "Model of an order (blood test)"
